{"version":3,"file":"cache.service.js","sourceRoot":"","sources":["../src/cache.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpResponse } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { defer, from, fromEvent, merge, throwError } from 'rxjs';\nimport { share, map, catchError } from 'rxjs/operators';\nimport { CacheStorageService, StorageCacheItem } from './cache-storage';\n\nexport interface CacheConfig {\n  keyPrefix?: string;\n}\n\nexport const MESSAGES = {\n  0: 'Cache initialization error: ',\n  1: 'Cache is not enabled.',\n  2: 'Cache entry already expired: ',\n  3: 'No such key: ',\n  4: 'No entries were deleted, because browser is offline.'\n};\n\nexport type CacheValueFactory<T> = () => Promise<T>;\n\n/**\n * @description Check if it's an HttpResponse\n * @param {any} data - Variable to test\n * @return {boolean} - data from cache\n */\nconst isHttpResponse = (data: any): boolean => {\n  let orCondition =\n    data &&\n    typeof data === 'object' &&\n    data.hasOwnProperty('status') &&\n    data.hasOwnProperty('statusText') &&\n    data.hasOwnProperty('headers') &&\n    data.hasOwnProperty('url') &&\n    data.hasOwnProperty('body');\n\n  return data && (data instanceof HttpResponse || orCondition);\n};\n\nconst isJsOrResponseType = (data: any): boolean => {\n  const jsType =\n    data.type === 'undefined' ||\n    data.type === 'object' ||\n    data.type === 'boolean' ||\n    data.type === 'number' ||\n    data.type === 'bigint' ||\n    data.type === 'string' ||\n    data.type === 'symbol' ||\n    data.type === 'function';\n\n  const responseType =\n    data.type === 'response';\n\n  return responseType || jsType;\n};\n\n@Injectable()\nexport class CacheService {\n  private ttl: number = 60 * 60; // one hour\n  private cacheEnabled: boolean = true;\n  private invalidateOffline: boolean = false;\n  private networkStatusChanges: Observable<boolean>;\n  private networkStatus: boolean = true;\n\n  constructor(\n    private _storage: CacheStorageService\n  ) {\n    this.watchNetworkInit();\n    this.loadCache();\n  }\n\n  private async loadCache() {\n    try {\n      await this._storage.ready();\n      this.cacheEnabled = true;\n    } catch (e) {\n      this.cacheEnabled = false;\n      console.error(MESSAGES[0], e);\n    }\n  }\n\n  async ready(): Promise<any> {\n    await this._storage.ready();\n  }\n\n  /**\n   * @description Disable or enable cache\n   */\n  enableCache(enable: boolean = true) {\n    this.cacheEnabled = enable;\n  }\n\n  /**\n   * @description Delete DB table and create new one\n   * @return {Promise<any>}\n   */\n  private async resetDatabase(): Promise<any> {\n    await this.ready();\n\n    let items = await this._storage.all();\n    return Promise.all(\n      items\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Set default TTL\n   * @param {number} ttl - TTL in seconds\n   */\n  setDefaultTTL(ttl: number): number {\n    return (this.ttl = ttl);\n  }\n\n  /**\n   * @description Set if expired cache should be invalidated if device is offline\n   * @param {boolean} offlineInvalidate\n   */\n  setOfflineInvalidate(offlineInvalidate: boolean) {\n    this.invalidateOffline = !offlineInvalidate;\n  }\n\n  /**\n   * @description Start watching if devices is online or offline\n   */\n  private watchNetworkInit() {\n    this.networkStatus = navigator.onLine;\n    const connect = fromEvent(window, 'online').pipe(map(() => true)),\n      disconnect = fromEvent(window, 'offline').pipe(map(() => false));\n\n    this.networkStatusChanges = merge(connect, disconnect).pipe(share());\n    this.networkStatusChanges.subscribe(status => {\n      this.networkStatus = status;\n    });\n  }\n\n  /**\n   * @description Stream of network status changes\n   * * @return {Observable<boolean>} network status stream\n   */\n  getNetworkStatusChanges() {\n    return this.networkStatusChanges;\n  }\n\n  /**\n   * @description Check if devices is online\n   * @return {boolean} network status\n   */\n  isOnline() {\n    return this.networkStatus;\n  }\n\n  /**\n   * @description Save item to cache\n   * @param {string} key - Unique key\n   * @param {any} data - Data to store\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Promise<any>} - saved data\n   */\n  saveItem(\n    key: string,\n    data: any,\n    groupKey: string = 'none',\n    ttl: number = this.ttl\n  ): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    if (Blob.name === data.constructor.name) {\n      return this.saveBlobItem(key, data, groupKey, ttl);\n    }\n\n    const expires = new Date().getTime() + ttl * 1000,\n      type = isHttpResponse(data) ? 'response' : typeof data,\n      value = JSON.stringify(data);\n\n    return this._storage.set(key, {\n      value,\n      expires,\n      type,\n      groupKey\n    });\n  }\n\n  /**\n   * @description Save blob item to cache\n   * @param {string} key - Unique key\n   * @param {any} blob - Blob to store\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Promise<any>} - saved data\n   */\n  private async saveBlobItem(\n    key: string,\n    blob: any,\n    groupKey: string = 'none',\n    ttl: number = this.ttl\n  ): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    const expires = new Date().getTime() + ttl * 1000,\n      type = blob.type;\n\n    try {\n      const base64data = await this.asBase64(blob);\n      const value = JSON.stringify(base64data);\n\n      return this._storage.set(key, {\n        value,\n        expires,\n        type,\n        groupKey\n      });\n    } catch (error) {\n      throw new Error(error);\n    }\n  }\n\n  // Technique derived from: https://stackoverflow.com/a/18650249\n  private asBase64(blob): Promise<string> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsDataURL(blob);\n      reader.onloadend = () => {\n        const base64data = reader.result;\n        resolve(base64data);\n      };\n      reader.onerror = (event) => {\n        reject(event);\n        reader.abort();\n      };\n    });\n  }\n\n  /**\n   * @description Delete item from cache\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - query execution promise\n   */\n  removeItem(key: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.remove(key);\n  }\n\n  /**\n   * @description Removes all items with a key that matches pattern\n   * @return {Promise<any>}\n   */\n  async removeItems(pattern: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let regex = new RegExp(`^${pattern.split('*').join('.*')}$`);\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .map(item => item.key)\n      .filter(key => key && regex.test(key))\n      .map(key => this.removeItem(key))\n    );\n  }\n\n  /**\n   * @description Get item from cache without expire check etc.\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getRawItem<T = any>(key: string): Promise<StorageCacheItem> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    try {\n      let data = await this._storage.get(key);\n      if (!!data) {\n        return data;\n      }\n\n      throw new Error('');\n    } catch (err) {\n      throw new Error(MESSAGES[3] + key);\n    }\n  }\n\n  async getRawItems() {\n    return this._storage.all();\n  }\n\n  /**\n   * @description Check if item exists in cache regardless if expired or not\n   * @param {string} key - Unique key\n   * @return {Promise<boolean | string>} - boolean - true if exists\n   */\n  async itemExists(key: string): Promise<boolean | string> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    return this._storage.exists(key);\n  }\n\n  /**\n   * @description Get item from cache with expire check and correct type assign\n   * @param {string} key - Unique key\n   * @return {Promise<any>} - data from cache\n   */\n  async getItem<T = any>(key: string): Promise<T> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[1]);\n    }\n\n    let data = await this.getRawItem(key);\n\n    if (data.expires < new Date().getTime() && (this.invalidateOffline || this.isOnline())) {\n      throw new Error(MESSAGES[2] + key);\n    }\n\n    return CacheService.decodeRawData(data);\n  }\n\n  async getOrSetItem<T>(\n    key: string,\n    factory: CacheValueFactory<T>,\n    groupKey?: string,\n    ttl?: number\n  ): Promise<T> {\n    let val: T;\n\n    try {\n      val = await this.getItem<T>(key);\n    } catch (error) {\n      val = await factory();\n      await this.saveItem(key, val, groupKey, ttl);\n    }\n\n    return val;\n  }\n\n  /**\n   * @description Decode raw data from DB\n   * @param {any} data - Data\n   * @return {any} - decoded data\n   */\n  static async decodeRawData(data: StorageCacheItem): Promise<any> {\n    let dataJson = JSON.parse(data.value);\n    if (isJsOrResponseType(data)) {\n      if (isHttpResponse(dataJson)) {\n        let response: any = {\n          body: dataJson._body || dataJson.body,\n          status: dataJson.status,\n          headers: dataJson.headers,\n          statusText: dataJson.statusText,\n          url: dataJson.url\n        };\n\n        return new HttpResponse(response);\n      }\n\n      return dataJson;\n    } else {\n      // Technique derived from: https://stackoverflow.com/a/36183085\n      const response = await fetch(dataJson);\n\n      return response.blob();\n    }\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromObservable<T = any>(\n    key: string,\n    observable: any,\n    groupKey?: string,\n    ttl?: number\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    observable = observable.pipe(share());\n\n    return defer(() => {\n      return from(this.getItem(key)).pipe(\n        catchError(e => {\n          observable.subscribe(\n            res => {\n              return this.saveItem(key, res, groupKey, ttl);\n            },\n            error => {\n              return throwError(error);\n            }\n          );\n\n          return observable;\n        })\n      );\n    });\n  }\n\n  /**\n   * @description Load item from cache if it's in cache or load from origin observable\n   * @param {string} key - Unique key\n   * @param {any} observable - Observable with data\n   * @param {string} [groupKey] - group key\n   * @param {number} [ttl] - TTL in seconds\n   * @param {string} [delayType='expired']\n   * @param {string} [metaKey] - property on T to which to assign meta data\n   * @return {Observable<any>} - data from cache or origin observable\n   */\n  loadFromDelayedObservable<T = any>(\n    key: string,\n    observable: Observable<T>,\n    groupKey?: string,\n    ttl: number = this.ttl,\n    delayType: string = 'expired',\n    metaKey?: string\n  ): Observable<T> {\n    if (!this.cacheEnabled) return observable;\n\n    const observableSubject = new Subject<T>();\n    observable = observable.pipe(share());\n\n    const subscribeOrigin = () => {\n      observable.subscribe(\n        res => {\n          this.saveItem(key, res, groupKey, ttl);\n          observableSubject.next(res);\n          observableSubject.complete();\n        },\n        err => {\n          observableSubject.error(err);\n        },\n        () => {\n          observableSubject.complete();\n        }\n      );\n    };\n\n    this.getItem<T>(key)\n      .then(data => {\n        if (metaKey) {\n          data[metaKey] = data[metaKey] || {};\n          data[metaKey].fromCache = true;\n        }\n        observableSubject.next(data);\n\n        if (delayType === 'all') {\n          subscribeOrigin();\n        } else {\n          observableSubject.complete();\n        }\n      })\n      .catch(e => {\n        this.getRawItem<T>(key)\n          .then(async(res) => {\n            let result = await CacheService.decodeRawData(res);\n            if (metaKey) {\n              result[metaKey] = result[metaKey] || {};\n              result[metaKey].fromCache = true;\n            }\n            observableSubject.next(result);\n            subscribeOrigin();\n          })\n          .catch(() => subscribeOrigin());\n      });\n\n    return observableSubject.asObservable();\n  }\n\n  /**\n   * Perform complete cache clear\n   * @return {Promise<any>}\n   */\n  clearAll(): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    return this.resetDatabase();\n  }\n\n  /**\n   * @description Remove all expired items from cache\n   * @param {boolean} ignoreOnlineStatus -\n   * @return {Promise<any>} - query promise\n   */\n  async clearExpired(ignoreOnlineStatus = false): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    if (!this.isOnline() && !ignoreOnlineStatus) {\n      throw new Error(MESSAGES[4]);\n    }\n\n    let items = await this._storage.all();\n    let datetime = new Date().getTime();\n\n    return Promise.all(\n      items\n      .filter(item => item.expires < datetime)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n\n  /**\n   * @description Remove all item with specified group\n   * @param {string} groupKey - group key\n   * @return {Promise<any>} - query promise\n   */\n  async clearGroup(groupKey: string): Promise<any> {\n    if (!this.cacheEnabled) {\n      throw new Error(MESSAGES[2]);\n    }\n\n    let items = await this._storage.all();\n\n    return Promise.all(\n      items\n      .filter(item => item.groupKey === groupKey)\n      .map(item => this.removeItem(item.key))\n    );\n  }\n}\n"]}